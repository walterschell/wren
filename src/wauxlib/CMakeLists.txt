
option(WAUXLIB_LOADER "Build Wauxlib loader" ON)
option(WAUXLIB_BINDER "Build Wauxlib binder" ON)
if(WAUXLIB_BINDER AND WAUXLIB_LOADER)
    option(WAUXLIB_DYNAMIC_PLUGINS "Build Wauxlib with plugin support" ON)
else()
    option(WAUXLIB_DYNAMIC_PLUGINS "(Disabled) Build Wauxlib with plugin support" OFF)
endif()
# In case they overrode the option on the command line
if(WAUXLIB_DYNAMIC_PLUGINS AND NOT (WAUXLIB_BINDER AND WAUXLIB_LOADER))
    message(FATAL_ERROR "WAUXLIB_DYNAMIC_PLUGINS requires WAUXLIB_BINDER and WAUXLIB_LOADER")
endif()

set(wauxlib_SRCS)
set(wauxlib_LIBS wren)
set(wauxlib_DEFINES)

if(WAUXLIB_LOADER)
    list(APPEND wauxlib_SRCS "src/wauxlib_loader.c")
    list(APPEND wauxlib_DEFINES "-DWAUXLIB_LOADER")
endif()

if(WAUXLIB_BINDER)
    add_subdirectory(deps/klib)
    list(APPEND wauxlib_LIBS klib)
    list(APPEND wauxlib_SRCS "src/wauxlib_binder.c")
    list(APPEND wauxlib_DEFINES "-DWAUXLIB_BINDER")
endif()

if(WAUXLIB_DYNAMIC_PLUGINS)
    list(APPEND wauxlib_DEFINES "-DWAUXLIB_DYNAMIC_PLUGINS")
endif()
add_library(wauxlib STATIC ${wauxlib_SRCS})
target_include_directories(wauxlib PUBLIC "include")
target_compile_options(wauxlib PRIVATE "-Wall" "-Wextra" "-Werror")
target_link_libraries(wauxlib PUBLIC ${wauxlib_LIBS})
target_compile_definitions(wauxlib PUBLIC ${wauxlib_DEFINES})

if(WAUXLIB_DYNAMIC_PLUGINS)
    add_library(wauxlib_plugin_interface INTERFACE)
    target_include_directories(wauxlib_plugin_interface INTERFACE "include")
    target_link_libraries(wauxlib_plugin_interface INTERFACE wren_plugin_interface klib)
    target_compile_definitions(wauxlib_plugin_interface INTERFACE ${wauxlib_DEFINES})
endif()